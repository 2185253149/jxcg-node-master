const fs=require("fs");function toFirstUpperCase(t){let e=t.charAt(0).toUpperCase();return t.replace(/./,e).replace(/_([a-z,A-Z])/g,(t,e)=>e.toUpperCase())}function toJava(t,e,n,a){let i=toFirstUpperCase(t);n.datbase&&(t=n.datbase+"."+t);let r="Integer",l="Long",s="String",p="Double",o="",c="",b="";for(let t in e){let n=e[t],a=toFirstUpperCase(t),i=s;switch(t){case"id":i=l,n.data_type&&/VARCHAR/i.test(n.data_type)&&(i=s),n.label=n.label||"编码",o+=`\n\t/**\n\t * ${n.label}\n\t */\n\t@TableId(type = IdType.ASSIGN_ID)\n\t@ApiModelProperty("${n.label}")\n\t@JsonSerialize(using = ToStringSerializer.class)\n\tprivate ${i} id;\n\t\t\t`;break;case"state":i=r,n.label=n.label||"逻辑删除控制",o+=`\n\t/**\n\t * ${n.label}\n\t */\n\t@ApiModelProperty("${n.label}")\n\t@TableLogic\n\tprivate ${i} state;\n\t\t\t  `;break;case"createTime":i=l,n.label=n.label||"创建时间",o+=`\n\t/**\n\t * ${n.label}\n\t */\n\t@TableField(fill = FieldFill.INSERT)\n\t@ApiModelProperty("${n.label}")\n\t@JsonSerialize(using = ToStringSerializer.class)\n\tprivate ${i} createTime;\n\t\t\t\t  `;break;case"createTimeString":i=s,n.label=n.label||"创建时间字符串",o+=`\n\t/**\n\t * ${n.label}\n\t */\n\t@TableField(fill = FieldFill.INSERT)\n\t@ApiModelProperty("${n.label}")\n\tprivate ${i} createTimeString;\n\t\t\t\t\t`;break;case"updateTime":i=l,n.label=n.label||"上次更新时间",o+=`\n\t/**\n\t * ${n.label}\n\t */\n\t@TableField(fill = FieldFill.UPDATE)\n\t@ApiModelProperty("${n.label}")\n\t@JsonSerialize(using = ToStringSerializer.class)\n\tprivate ${i} updateTime;\n\t\t\t\t\t`;break;case"updateTimeString":i=s,n.label=n.label||"更新时间字符串",o+=`\n\t/**\n\t * ${n.label}\n\t */\n\t@TableField(fill = FieldFill.UPDATE)\n\t@ApiModelProperty("${n.label}")\n\tprivate ${i} updateTimeString;\n\t\t\t\t\t`;break;case"unitId":i=s,n.label=n.label||"单位",o+=`\n\t/**\n\t * ${n.label}\n\t */\n\t@TableField(fill = FieldFill.INSERT)\n\t@ApiModelProperty("${n.label}")\n\tprivate ${i} unitId;\n\t\t\t\t\t`;break;default:n.label=n.label||t||"",n.varType||(n.rule=n.rule||{},i=n.rule.PositiveNum?p:n.rule.PositiveInt?r:i,/sort|level/.test(t)||"switch"==n.type||n.attr&&"number"==n.attr.type||n.data_type&&/int/i.test(n.data_type)?i=r:("datetime"==n.type||n.data_type&&/bigint/i.test(n.data_type))&&(i=l)),o+=`\n    /**\n     * ${n.label}\n\t * ${n.desc||""}\n     */\n    @ApiModelProperty("${n.label}")\n    private ${i} ${t};\n\t\t\t\t`}"unitId"!=t&&(b+=`\\"${t}\\":\\"" + this.get${a}() + "\\",`),c+=`\n\t/**\n\t * 设置${n.label}\n\t */\n\tpublic void set${a}(${i} ${t}){\n\t\tthis.${t} = ${t};\n\t}\n\n\t/**\n\t * 获取${n.label}\n\t */\n\tpublic ${i} get${a}(){\n\t\treturn this.${t};\n\t}\n\t\t`}let d=`\npackage ${n.id}.entity;\n\nimport java.io.Serializable;\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\n\n/**\n * \n * @TableName ${t}\n * @description ${a.nickName} ${a.desc}\n */\n@Data\n@TableName("${t}")\n@ApiModel\npublic class ${i} implements Serializable {\n    ${o}\n\t${c}\n\tpublic String stringify(){\n\t\tString rc = "{${b}\\"unitId\\":\\"" + this.getUnitId() + "\\"}";\n\t\trc = rc.replaceAll("\\"null\\"","null").replaceAll("\\"([0-9]+)\\"","$1");\n        return rc;\n\t}\n\n\tpublic static ${i} JSONparse(String jsonString) throws JsonProcessingException {\n        if(jsonString == null) return null;\n\t\ttry {\n            ObjectMapper objectMapper = new ObjectMapper();\n            return objectMapper.readValue(jsonString,${i}.class);\n        }catch (JsonProcessingException e){\n            return null;\n        }\n    }\n}\n    `;fs.existsSync("./java")||fs.mkdirSync("./java"),fs.existsSync("./java/entity")||fs.mkdirSync("./java/entity"),fs.existsSync("./java/mapper")||fs.mkdirSync("./java/mapper"),fs.existsSync("./java/service")||fs.mkdirSync("./java/service"),fs.existsSync("./java/service/impl")||fs.mkdirSync("./java/service/impl"),fs.writeFileSync(`./java/entity/${i}.java`,d),fs.writeFileSync(`./java/mapper/${i}Mapper.java`,`\npackage ${n.id}.mapper;\nimport ${n.id}.entity.${i};\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Date;\n\n@Repository\npublic interface ${i}Mapper extends CustomerBaseMapper<${i}> {\n\n}\n\t`),fs.writeFileSync(`./java/service/${i}Service.java`,`\npackage ${n.id}.service;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport ${n.id}.Interceptor.ResultData;\nimport ${n.id}.entity.${i};\nimport ${n.id}.mapper.${i}Mapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.io.Serializable;\n\n/**\n* @author --\n* @description 针对表【${t}】的数据库操作Service\n* @createDate ${(new Date).toLocaleString()}\n*/\npublic interface ${i}Service extends IService<${i}> {\n\n}\t\n\t`),fs.writeFileSync(`./java/service/impl/${i}ServiceImpl.java`,`\npackage ${n.id}.service.impl;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport ${n.id}.entity.${i};\nimport ${n.id}.service.${i}Service;\nimport ${n.id}.mapper.${i}Mapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n* @author --\n* @description 针对表【${t}】的数据库操作Service实现\n* @createDate ${(new Date).toLocaleString()}\n*/\n@Service\npublic class ${i}ServiceImpl extends ServiceImpl<${i}Mapper, ${i}>\nimplements ${i}Service{\n\n}\n\t\n\t`)}function toDart(t,e,n,a){let i=toFirstUpperCase(t);n.datbase&&(t=n.datbase+"."+t);let r="int",l="BigInt",s="String",p="double",o="",c="";for(let t in e){let n=e[t],a=(toFirstUpperCase(t),s);switch(t){case"id":a=l,n.data_type&&/VARCHAR/i.test(n.data_type)&&(a=s),n.label=n.label||"编码",o+=`\n\t///${n.label}\n\t${a} id;\n\t\t\t`;break;case"state":a=r,n.label=n.label||"逻辑删除控制",o+=`\n\t///${n.label}\n\t${a} state;\n\t\t\t  `;break;case"createTime":a=l,n.label=n.label||"创建时间",o+=`\n\t///${n.label}\n\t${a} createTime;\n\t\t\t\t  `;break;case"updateTime":a=l,n.label=n.label||"上次更新时间",o+=`\n\t///${n.label}\n\t${a} updateTime;\n\t\t\t\t\t`;break;case"unitId":a=s,n.label=n.label||"单位",o+=`\n\t///${n.label}\n\t${a} unitId;\n\t\t\t\t\t`;break;default:n.label=n.label||t||"",n.varType||(n.rule=n.rule||{},a=n.rule.PositiveNum?p:n.rule.PositiveInt?r:a,/sort|level/.test(t)||"switch"==n.type||n.attr&&"number"==n.attr.type||n.data_type&&/int/i.test(n.data_type)?a=r:("datetime"==n.type||n.data_type&&/bigint/i.test(n.data_type))&&(a=l)),o+=`\n  ///${n.label} ${n.desc||""}\n  ${a} ${t};\n\t\t\t\t`}c+="int"==a?`\n\t\t${t} = int.parse(map['${t}'].toString());`:"double"==a?`\n\t\t${t} = double.parse(map['${t}'].toString());`:"BigInt"==a?`\n\t\t${t} = BigInt.parse(map['${t}'].toString());`:`\n\t\t${t} = map['${t}'];`}let b=`\nclass ${i}{\n\t${o}\n\t${i}(Map map){\n\t\tif(map == null) return;\n\t\t${c}\n\t}\n}\n    `;fs.existsSync("./dart")||fs.mkdirSync("./dart"),fs.writeFileSync(`./dart/${i}.dart`,b)}module.exports={toJava:toJava,toDart:toDart};